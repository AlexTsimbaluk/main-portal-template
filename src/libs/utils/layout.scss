/* Настройки */
/* vim: set ft=css et ts=4: */
$quantum: 24;
$width-sm: 768px;
$width-md: 992px;
$width-lg: 1200px;

@import "utils";

/* Собственно css */
.flex {
    display: flex;
    flex-direction: row;
    flex-wrap: nowrap;
    overflow: hidden;

    padding: 0px;
    margin: 0px;

    >* {
        padding: 0px;
        margin: 0px;
        overflow: hidden;
        flex: 0 0 auto;
    }


    /* гравитация */
    @mixin orientationVariant($prefix){
        &.#{$prefix}left               {   flex-direction: row;                }
        &.#{$prefix}right              {   flex-direction: row-reverse;        }
        &.#{$prefix}top                {   flex-direction: column;             }
        &.#{$prefix}bottom             {   flex-direction: column-reverse;     }
        &.#{$prefix}left, &.#{$prefix}right   {   &:not(.eflex) >* { height: 100%;   }}
        &.#{$prefix}top, &.#{$prefix}bottom   {   &:not(.eflex) >* { width: 100%;    }}

        @mixin ssize($suffix){
            @mixin loop($q) when($q >= 0){
                > .#{$prefix}grow#{$suffix}-#{$q} {
                    flex-grow: $q;
                }
                > .#{$prefix}shrink#{$suffix}-#{$q} {
                    flex-shrink: $q;
                }
                @include loop($q - 1);
            }
            @include loop($quantum);
        }
                                        @include ssize("");    /* без суффиксов */
        @media(min-width: $width-sm) {  @include ssize(-sm);    }
        @media(min-width: $width-md) {  @include ssize(-md);    }
        @media(min-width: $width-lg) {  @include ssize(-lg);    }
    }
                                        @include orientationVariant("");
    @media (orientation: landscape) {   @include orientationVariant(unquote("lo-")); }
    @media (orientation: portrait)  {   @include orientationVariant(unquote("po-")); }


    
    @mixin variant($prefix, $sprefix){

        @mixin ssize($suffix){
            @mixin loop($q) when($q >= 0){
                &.#{$prefix}left, &.#{$prefix}right {
                    > .#{$sprefix}size#{$suffix}-#{$q} {
                        width: (floor(10000000000% * $q / 24) / 100000000);
                    }
                }

                &.#{$prefix}top, &.#{$prefix}bottom {
                    > .#{$sprefix}size#{$suffix}-#{$q} {
                        height: (floor(10000000000% * $q / 24) / 100000000);
                    }
                }
                @include loop($q - 1);
            }
            @include loop($quantum);
        }
                                        @include ssize("");    /* без суффиксов */
        @media(min-width: $width-sm) {  @include ssize(-sm);    }
        @media(min-width: $width-md) {  @include ssize(-md);    }
        @media(min-width: $width-lg) {  @include ssize(-lg);    }
    }
                                        @include variant("", ""); /* без преффиксов */

    @media (orientation: landscape) {
                                        @include variant("", unquote("lo-"));
                                        @include variant(unquote("lo-"), "");
                                        @include variant(unquote("lo-"), unquote("lo-"));
    }
    @media (orientation: portrait)  {
                                        @include variant("", unquote("po-"));
                                        @include variant(unquote("po-"), "");
                                        @include variant(unquote("po-"), unquote("po-"));
    }

    .eflex {
        flex-wrap: wrap;
        &.forward   {   flex-wrap: wrap;            }
        &.backward  {   flex-wrap: wrap-reverse;    }
    }
}
